"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A datetime and timezone string in ISO 8601 format `Y-m-dTH:i:sO`, e.g. `2020-04-20T13:53:12+02:00`."
scalar DateTimeTz
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeTz")

type Query {
    users: [User!]! @paginate(defaultCount: 10) #@paginate are directive wich come from nuwave/Lighthouse library
    user(id: ID! @eq): User @find #@eq directive means filter in db 'WHERE'  id is equal to the passed ID in value. @find just means to look for and pull all entries wich comply to the @eq condition.
    posts: [Post!]! @all #@all is a directive wich means mimics all method of every single model.
    post(id: ID! @eq): Post! @find
    topic(slug: String! @eq): Topic @find
}

type User {
    id: ID!
    name: String!
    email: String!
    avatar: String!
    created_at: DateTime!
    updated_at: DateTime!
    # We shouldn't show private data like password , notice that it's not retireve there
    posts: [Post!]! @hasMany
}

type Topic {
    id: ID! #//to have id integer (!)exclamation mark means this field can not be null we expect always a value there
    name: String!
    slug: String!
    posts: [Post!]! @hasMany #here ! means that Post content is required and second ! means the array of post object must content at least one post also.
}

type Post {
    id: ID!
    title: String!
    content: String!
    lead: String!
    created_at: DateTime!
    updated_at: DateTime!
    author: User! @belongsTo
    topic: Topic! @belongsTo
}
